// routes/roomTypes.js - VERSÃO COM DISPONIBILIDADE POR PERÍODO
const express = require('express');
const router = express.Router();
const RoomType = require('../models/RoomType');
const { authenticate } = require('../middleware/auth');
const { getDefaultAvailabilityByPeriod, validatePeriodAvailability } = require('../utils/periodAvailability');

// ✅ GET /api/room-types - Listar todos os tipos (COM AUTH)
router.get('/', authenticate, async (req, res) => {
  try {
    console.log('📥 GET /api/room-types - Listando tipos de quarto...');
    
    const roomTypes = await RoomType.findAtivos();
    
    console.log(`✅ ${roomTypes.length} tipos encontrados`);
    
    res.json({
      success: true,
      data: roomTypes,
      message: `${roomTypes.length} tipos de quarto encontrados`
    });
  } catch (error) {
    console.error('❌ Erro ao buscar tipos de quarto:', error);
    res.status(500).json({
      success: false,
      message: 'Erro interno do servidor',
      error: error.message
    });
  }
});

// ✅ GET /api/room-types/available/:periodo/:contexto - Buscar tipos disponíveis para período específico
router.get('/available/:periodo/:contexto', authenticate, async (req, res) => {
  try {
    const { periodo, contexto } = req.params;
    console.log(`📥 GET /api/room-types/available/${periodo}/${contexto}`);
    
    if (!['hoje', 'agendado'].includes(contexto)) {
      return res.status(400).json({
        success: false,
        message: 'Contexto deve ser "hoje" ou "agendado"'
      });
    }
    
    const roomTypes = await RoomType.findDisponivelParaPeriodo(periodo, contexto);
    
    res.json({
      success: true,
      data: roomTypes,
      message: `${roomTypes.length} tipos disponíveis para ${periodo} (${contexto})`
    });
  } catch (error) {
    console.error('❌ Erro ao buscar tipos disponíveis:', error);
    res.status(500).json({
      success: false,
      message: 'Erro interno do servidor',
      error: error.message
    });
  }
});

// ✅ GET /api/room-types/:id - Buscar tipo específico (COM AUTH)
router.get('/:id', authenticate, async (req, res) => {
  try {
    console.log(`📥 GET /api/room-types/${req.params.id}`);
    
    const roomType = await RoomType.findOne({ 
      id: req.params.id, 
      'disponibilidade.ativo': true 
    });
    
    if (!roomType) {
      return res.status(404).json({
        success: false,
        message: 'Tipo de quarto não encontrado'
      });
    }
    
    res.json({
      success: true,
      data: roomType,
      message: 'Tipo encontrado'
    });
  } catch (error) {
    console.error('❌ Erro ao buscar tipo:', error);
    res.status(500).json({
      success: false,
      message: 'Erro interno do servidor',
      error: error.message
    });
  }
});

// ✅ POST /api/room-types - Criar novo tipo (COM AUTH)
router.post('/', authenticate, async (req, res) => {
  try {
    console.log('📤 POST /api/room-types - Criando novo tipo...');
    console.log('📦 Dados recebidos:', req.body);
    
    const { 
      nome, 
      precosPorPeriodo, 
      disponibilidadePorPeriodo,
      amenidades, 
      descricao, 
      configuracao 
    } = req.body;

    if (!nome || !nome.trim()) {
      return res.status(400).json({
        success: false,
        message: 'Nome do tipo é obrigatório'
      });
    }

    const id = nome.toLowerCase().replace(/\s+/g, '_').replace(/[^a-z0-9_]/g, '');

    // Verificar se já existe
    const existingType = await RoomType.findOne({ id });
    if (existingType) {
      return res.status(400).json({
        success: false,
        message: 'Tipo de quarto já existe'
      });
    }

    // Buscar a maior ordem atual
    const lastType = await RoomType.findOne().sort({ ordem: -1 });
    const newOrder = lastType ? lastType.ordem + 1 : 1;

    // ✅ PROCESSAR DISPONIBILIDADE POR PERÍODO
    const periodosHoje = [];
    const periodosAgendado = [];
    const disponibilidadeProcessada = new Map();
    
    if (disponibilidadePorPeriodo) {
      Object.entries(disponibilidadePorPeriodo).forEach(([periodoId, config]) => {
        disponibilidadeProcessada.set(periodoId, {
          hoje: config.hoje || false,
          agendado: config.agendado || false,
          availableFor: []
        });
        
        if (config.hoje) {
          periodosHoje.push(periodoId);
          disponibilidadeProcessada.get(periodoId).availableFor.push('today');
        }
        if (config.agendado) {
          periodosAgendado.push(periodoId);
          disponibilidadeProcessada.get(periodoId).availableFor.push('future');
        }
      });
    }

    // ✅ DADOS ATUALIZADOS PARA O NOVO MODELO
    const roomTypeData = {
      id,
      nome: nome.trim(),
      precosPorPeriodo: precosPorPeriodo ? new Map(Object.entries(precosPorPeriodo)) : new Map(),
      disponibilidadePorPeriodo: disponibilidadeProcessada,
      periodosHoje,
      periodosAgendado,
      amenidades: amenidades || ['wifi', 'ar_condicionado', 'tv'],
      descricao: descricao || `Quarto tipo ${nome}`,
      configuracao: configuracao || { capacidadeMaxima: 2 },
      ordem: newOrder,
      criadoPor: req.user?.id || req.user?._id,
      disponibilidade: {
        ativo: true,
        aceitaReservaHoje: periodosHoje.length > 0,
        aceitaReservaAgendada: periodosAgendado.length > 0
      }
    };

    const roomType = new RoomType(roomTypeData);
    await roomType.save();

    console.log('✅ Tipo criado com sucesso:', roomType.id);

    res.status(201).json({
      success: true,
      data: roomType,
      message: `Tipo "${nome}" criado com sucesso`
    });

  } catch (error) {
    console.error('❌ Erro ao criar tipo:', error);
    
    if (error.code === 11000) {
      res.status(400).json({
        success: false,
        message: 'Tipo com este ID já existe'
      });
    } else if (error.name === 'ValidationError') {
      const errors = Object.values(error.errors).map(err => err.message);
      res.status(400).json({
        success: false,
        message: 'Dados inválidos',
        errors: errors
      });
    } else {
      res.status(500).json({
        success: false,
        message: 'Erro ao criar tipo',
        error: error.message
      });
    }
  }
});

// ✅ ROTA PUT CORRIGIDA PARA SALVAR DISPONIBILIDADE
router.put('/:id', authenticate, async (req, res) => {
  try {
    console.log(`📤 PUT /api/room-types/${req.params.id}`);
    console.log('📦 Dados recebidos (COMPLETOS):', JSON.stringify(req.body, null, 2));
    
    const { 
      nome, 
      precosPorPeriodo, 
      disponibilidadePorPeriodo,    // ✅ NOVO: Receber disponibilidade
      configuracoesCompletas,       // ✅ NOVO: Configurações completas
      periodosHoje,                 // ✅ NOVO: Lista de períodos para hoje
      periodosAgendado,             // ✅ NOVO: Lista de períodos para agendado
      amenidades, 
      descricao, 
      configuracao, 
      disponibilidade, 
      ativo, 
      active 
    } = req.body;

    // ✅ BUSCAR TIPO EXISTENTE
    const roomType = await RoomType.findOne({ id: req.params.id });
    if (!roomType) {
      console.log(`❌ Tipo não encontrado: ${req.params.id}`);
      return res.status(404).json({
        success: false,
        message: 'Tipo de quarto não encontrado'
      });
    }

    console.log('📋 Tipo encontrado:', roomType.nome);

    // ✅ ATUALIZAR NOME
    if (nome && nome.trim()) {
      roomType.nome = nome.trim();
      console.log('✅ Nome atualizado:', roomType.nome);
    }

    // ✅ ATUALIZAR PREÇOS POR PERÍODO
    if (precosPorPeriodo && typeof precosPorPeriodo === 'object') {
      const precosValidos = Object.entries(precosPorPeriodo).filter(([_, preco]) => 
        typeof preco === 'number' && preco > 0
      );
      
      if (precosValidos.length > 0) {
        roomType.precosPorPeriodo = { ...precosPorPeriodo };
        console.log('✅ Preços atualizados:', roomType.precosPorPeriodo);
        console.log(`📊 ${precosValidos.length} preços válidos recebidos`);
      } else {
        console.log('⚠️ Nenhum preço válido encontrado');
        return res.status(400).json({
          success: false,
          message: 'É necessário pelo menos um preço válido (maior que zero)'
        });
      }
    }

    // ✅ NOVA SEÇÃO: PROCESSAR DISPONIBILIDADE POR PERÍODO
    if (disponibilidadePorPeriodo && typeof disponibilidadePorPeriodo === 'object') {
      console.log('📅 Processando disponibilidade por período:', disponibilidadePorPeriodo);
      
      // ✅ Criar campos para armazenar no modelo
      if (!roomType.toObject().disponibilidadePorPeriodo) {
        roomType.set('disponibilidadePorPeriodo', {});
      }
      
      // ✅ Salvar disponibilidade completa
      roomType.set('disponibilidadePorPeriodo', disponibilidadePorPeriodo);
      
      // ✅ Extrair listas de períodos por contexto
      const periodosHojeExtraidos = [];
      const periodosAgendadoExtraidos = [];
      
      Object.entries(disponibilidadePorPeriodo).forEach(([periodoId, config]) => {
        console.log(`   📋 ${periodoId}: hoje=${config.hoje}, agendado=${config.agendado}`);
        
        if (config.hoje === true) {
          periodosHojeExtraidos.push(periodoId);
        }
        if (config.agendado === true) {
          periodosAgendadoExtraidos.push(periodoId);
        }
      });
      
      // ✅ Salvar listas extraídas
      roomType.set('periodosHoje', periodosHojeExtraidos);
      roomType.set('periodosAgendado', periodosAgendadoExtraidos);
      
      console.log('✅ Períodos HOJE extraídos:', periodosHojeExtraidos);
      console.log('✅ Períodos AGENDADO extraídos:', periodosAgendadoExtraidos);
    }

    // ✅ PROCESSAR CONFIGURAÇÕES COMPLETAS (SE ENVIADO)
    if (configuracoesCompletas && typeof configuracoesCompletas === 'object') {
      console.log('🔧 Salvando configurações completas:', configuracoesCompletas);
      roomType.set('configuracoesCompletas', configuracoesCompletas);
    }

    // ✅ PROCESSAR LISTAS DIRETAS (SE ENVIADO)
    if (periodosHoje && Array.isArray(periodosHoje)) {
      console.log('📋 Períodos HOJE recebidos diretamente:', periodosHoje);
      roomType.set('periodosHoje', periodosHoje);
    }

    if (periodosAgendado && Array.isArray(periodosAgendado)) {
      console.log('📋 Períodos AGENDADO recebidos diretamente:', periodosAgendado);
      roomType.set('periodosAgendado', periodosAgendado);
    }

    // ✅ OUTROS CAMPOS (SEM MUDANÇAS)
    if (amenidades && Array.isArray(amenidades)) {
      roomType.amenidades = amenidades;
      console.log('✅ Amenidades atualizadas');
    }

    if (descricao !== undefined) {
      roomType.descricao = descricao;
      console.log('✅ Descrição atualizada');
    }

    if (configuracao && typeof configuracao === 'object') {
      roomType.configuracao = { ...roomType.configuracao, ...configuracao };
      console.log('✅ Configuração atualizada');
    }

    if (disponibilidade && typeof disponibilidade === 'object') {
      roomType.disponibilidade = { ...roomType.disponibilidade, ...disponibilidade };
      console.log('✅ Disponibilidade geral atualizada');
    }

    // ✅ CAMPOS DE ATIVAÇÃO
    if (ativo !== undefined) {
      roomType.ativo = ativo;
      roomType.active = ativo;
      if (!roomType.disponibilidade) roomType.disponibilidade = {};
      roomType.disponibilidade.ativo = ativo;
      console.log('✅ Status ativo atualizado:', ativo);
    }

    if (active !== undefined) {
      roomType.active = active;
      roomType.ativo = active;
      if (!roomType.disponibilidade) roomType.disponibilidade = {};
      roomType.disponibilidade.ativo = active;
      console.log('✅ Status active atualizado:', active);
    }
    
    // ✅ AUDITORIA
    roomType.atualizadoPor = req.user?.id || req.user?._id;

    // ✅ SALVAR NO BANCO
    console.log('💾 Salvando no banco de dados...');
    console.log('🔍 Dados que serão salvos:');
    console.log('   📊 Preços:', roomType.precosPorPeriodo);
    console.log('   📅 Disponibilidade:', roomType.get('disponibilidadePorPeriodo'));
    console.log('   🚀 Períodos Hoje:', roomType.get('periodosHoje'));
    console.log('   📅 Períodos Agendado:', roomType.get('periodosAgendado'));
    
    await roomType.save();

    console.log('✅ Tipo salvo com sucesso no banco');

    // ✅ VERIFICAR SE DADOS FORAM SALVOS CORRETAMENTE
    const tipoVerificacao = await RoomType.findOne({ id: req.params.id });
    console.log('🔍 VERIFICAÇÃO PÓS-SAVE:');
    console.log('   💰 Preços salvos:', tipoVerificacao.precosPorPeriodo);
    console.log('   📅 Disponibilidade salva:', tipoVerificacao.get('disponibilidadePorPeriodo'));
    console.log('   🚀 Períodos Hoje salvos:', tipoVerificacao.get('periodosHoje'));
    console.log('   📅 Períodos Agendado salvos:', tipoVerificacao.get('periodosAgendado'));

    // ✅ RESPOSTA DE SUCESSO COM DADOS COMPLETOS
    res.json({
      success: true,
      data: {
        ...tipoVerificacao.toJSON(),
        // ✅ Garantir que dados de disponibilidade são retornados
        disponibilidadePorPeriodo: tipoVerificacao.get('disponibilidadePorPeriodo'),
        configuracoesCompletas: tipoVerificacao.get('configuracoesCompletas'),
        periodosHoje: tipoVerificacao.get('periodosHoje'),
        periodosAgendado: tipoVerificacao.get('periodosAgendado')
      },
      message: `Tipo "${roomType.nome}" atualizado com sucesso`,
      debug: {
        periodosHojeSalvos: tipoVerificacao.get('periodosHoje')?.length || 0,
        periodosAgendadoSalvos: tipoVerificacao.get('periodosAgendado')?.length || 0,
        disponibilidadeSalva: !!tipoVerificacao.get('disponibilidadePorPeriodo')
      }
    });

  } catch (error) {
    console.error('❌ Erro ao atualizar tipo:', error);
    
    if (error.name === 'ValidationError') {
      const errors = Object.values(error.errors).map(err => err.message);
      console.error('❌ Erros de validação:', errors);
      res.status(400).json({
        success: false,
        message: 'Dados inválidos',
        errors: errors
      });
    } else if (error.name === 'CastError') {
      console.error('❌ Erro de tipo de dados:', error.message);
      res.status(400).json({
        success: false,
        message: 'Formato de dados inválido'
      });
    } else {
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor ao atualizar tipo',
        error: error.message
      });
    }
  }
});

// ✅ PUT /api/room-types/:id/periodo/:periodoId - Atualizar disponibilidade de período específico
router.put('/:id/periodo/:periodoId', authenticate, async (req, res) => {
  try {
    const { id, periodoId } = req.params;
    const { hoje, agendado, preco } = req.body;

    console.log(`📤 PUT /api/room-types/${id}/periodo/${periodoId}`, { hoje, agendado, preco });

    const roomType = await RoomType.findOne({ id });
    if (!roomType) {
      return res.status(404).json({
        success: false,
        message: 'Tipo de quarto não encontrado'
      });
    }

    // ✅ ATUALIZAR DISPONIBILIDADE DO PERÍODO
    if (hoje !== undefined || agendado !== undefined) {
      roomType.setDisponibilidadePeriodo(
        periodoId, 
        hoje !== undefined ? hoje : roomType.isPeriodoDisponivelHoje(periodoId),
        agendado !== undefined ? agendado : roomType.isPeriodoDisponivelAgendado(periodoId)
      );
    }

    // ✅ ATUALIZAR PREÇO DO PERÍODO
    if (preco !== undefined && typeof preco === 'number' && preco >= 0) {
      roomType.setPrecoPorPeriodo(periodoId, preco);
    }

    roomType.atualizadoPor = req.user?.id || req.user?._id;
    await roomType.save();

    console.log(`✅ Período ${periodoId} atualizado para tipo ${roomType.nome}`);

    res.json({
      success: true,
      message: `Período ${periodoId} atualizado com sucesso`,
      data: {
        id: roomType.id,
        nome: roomType.nome,
        periodo: {
          id: periodoId,
          hoje: roomType.isPeriodoDisponivelHoje(periodoId),
          agendado: roomType.isPeriodoDisponivelAgendado(periodoId),
          preco: roomType.getPrecoPorPeriodo(periodoId)
        }
      }
    });

  } catch (error) {
    console.error('❌ Erro ao atualizar período:', error);
    res.status(500).json({
      success: false,
      message: 'Erro ao atualizar período',
      error: error.message
    });
  }
});

// ✅ DELETE /api/room-types/:id - Deletar tipo (COM AUTH)
router.delete('/:id', authenticate, async (req, res) => {
  try {
    console.log(`🗑️ DELETE /api/room-types/${req.params.id}`);
    
    // Verificar se não é um tipo padrão
    const protectedTypes = ['standard', 'premium', 'luxo', 'suite'];
    if (protectedTypes.includes(req.params.id)) {
      return res.status(400).json({
        success: false,
        message: 'Não é possível deletar tipos padrão'
      });
    }

    const roomType = await RoomType.findOne({ id: req.params.id });
    if (!roomType) {
      return res.status(404).json({
        success: false,
        message: 'Tipo de quarto não encontrado'
      });
    }

    // Verificar se há quartos usando este tipo
    const Room = require('../models/Room');
    const roomsWithType = await Room.countDocuments({ 
      type: req.params.id, 
      isActive: true 
    });
    
    if (roomsWithType > 0) {
      return res.status(400).json({
        success: false,
        message: `Não é possível deletar. Existem ${roomsWithType} quartos usando este tipo.`,
        data: { roomsCount: roomsWithType }
      });
    }

    // Soft delete
    roomType.disponibilidade.ativo = false;
    roomType.ativo = false;
    roomType.active = false;
    roomType.atualizadoPor = req.user?.id || req.user?._id;
    await roomType.save();

    console.log('✅ Tipo deletado (soft):', roomType.nome);

    res.json({
      success: true,
      message: `Tipo "${roomType.nome}" removido com sucesso`
    });

  } catch (error) {
    console.error('❌ Erro ao deletar tipo:', error);
    res.status(500).json({
      success: false,
      message: 'Erro ao deletar tipo',
      error: error.message
    });
  }
});

// ✅ POST /api/room-types/init - Inicializar tipos padrão (COM AUTH)
router.post('/init', authenticate, async (req, res) => {
  try {
    console.log('🏗️ POST /api/room-types/init - Inicializando tipos padrão...');
    
    // Verificar se usuário é admin
    if (req.user?.role !== 'admin') {
      return res.status(403).json({
        success: false,
        message: 'Apenas administradores podem inicializar tipos padrão'
      });
    }

    const tiposCriados = await RoomType.criarTiposPadrao();

    res.json({
      success: true,
      data: tiposCriados,
      message: 'Tipos padrão inicializados com sucesso'
    });

  } catch (error) {
    console.error('❌ Erro ao inicializar tipos:', error);
    res.status(500).json({
      success: false,
      message: 'Erro ao inicializar tipos',
      error: error.message
    });
  }
});

module.exports = router;
