// routes/roomTypes.js - VERS√ÉO COM AUTENTICA√á√ÉO REATIVADA
const express = require('express');
const router = express.Router();
const RoomType = require('../models/RoomType');
const { authenticate } = require('../middleware/auth'); // ‚úÖ REATIVADO

// ‚úÖ GET /api/room-types - Listar todos os tipos (COM AUTH)
router.get('/', authenticate, async (req, res) => {
  try {
    console.log('üì• GET /api/room-types - Listando tipos de quarto...');
    
    // ‚úÖ CORRIGIDO: Usar findAtivos em vez de findActive
    const roomTypes = await RoomType.findAtivos();
    
    console.log(`‚úÖ ${roomTypes.length} tipos encontrados`);
    
    res.json({
      success: true,
      data: roomTypes,
      message: `${roomTypes.length} tipos de quarto encontrados`
    });
  } catch (error) {
    console.error('‚ùå Erro ao buscar tipos de quarto:', error);
    res.status(500).json({
      success: false,
      message: 'Erro interno do servidor',
      error: error.message
    });
  }
});

// ‚úÖ GET /api/room-types/:id - Buscar tipo espec√≠fico (COM AUTH)
router.get('/:id', authenticate, async (req, res) => {
  try {
    console.log(`üì• GET /api/room-types/${req.params.id}`);
    
    // ‚úÖ CORRIGIDO: Usar disponibilidade.ativo em vez de active
    const roomType = await RoomType.findOne({ 
      id: req.params.id, 
      'disponibilidade.ativo': true 
    });
    
    if (!roomType) {
      return res.status(404).json({
        success: false,
        message: 'Tipo de quarto n√£o encontrado'
      });
    }
    
    res.json({
      success: true,
      data: roomType,
      message: 'Tipo encontrado'
    });
  } catch (error) {
    console.error('‚ùå Erro ao buscar tipo:', error);
    res.status(500).json({
      success: false,
      message: 'Erro interno do servidor',
      error: error.message
    });
  }
});

// ‚úÖ POST /api/room-types - Criar novo tipo (COM AUTH)
router.post('/', authenticate, async (req, res) => {
  try {
    console.log('üì§ POST /api/room-types - Criando novo tipo...');
    console.log('üì¶ Dados recebidos:', req.body);
    
    const { nome, precosPorPeriodo, amenidades, descricao, configuracao } = req.body;

    if (!nome || !nome.trim()) {
      return res.status(400).json({
        success: false,
        message: 'Nome do tipo √© obrigat√≥rio'
      });
    }

    const id = nome.toLowerCase().replace(/\s+/g, '_').replace(/[^a-z0-9_]/g, '');

    // Verificar se j√° existe
    const existingType = await RoomType.findOne({ id });
    if (existingType) {
      return res.status(400).json({
        success: false,
        message: 'Tipo de quarto j√° existe'
      });
    }

    // Buscar a maior ordem atual
    const lastType = await RoomType.findOne().sort({ ordem: -1 });
    const newOrder = lastType ? lastType.ordem + 1 : 1;

    // ‚úÖ DADOS ATUALIZADOS PARA O NOVO MODELO
    const roomTypeData = {
      id,
      nome: nome.trim(),
      precosPorPeriodo: precosPorPeriodo || {},
      amenidades: amenidades || ['wifi', 'ar_condicionado', 'tv'],
      descricao: descricao || `Quarto tipo ${nome}`,
      configuracao: configuracao || { capacidadeMaxima: 2 },
      ordem: newOrder,
      criadoPor: req.user?.id || req.user?._id
    };

    const roomType = new RoomType(roomTypeData);
    await roomType.save();

    console.log('‚úÖ Tipo criado com sucesso:', roomType.id);

    res.status(201).json({
      success: true,
      data: roomType,
      message: `Tipo "${nome}" criado com sucesso`
    });

  } catch (error) {
    console.error('‚ùå Erro ao criar tipo:', error);
    
    if (error.code === 11000) {
      res.status(400).json({
        success: false,
        message: 'Tipo com este ID j√° existe'
      });
    } else if (error.name === 'ValidationError') {
      const errors = Object.values(error.errors).map(err => err.message);
      res.status(400).json({
        success: false,
        message: 'Dados inv√°lidos',
        errors: errors
      });
    } else {
      res.status(500).json({
        success: false,
        message: 'Erro ao criar tipo',
        error: error.message
      });
    }
  }
});

// ‚úÖ PUT /api/room-types/:id - Atualizar tipo (COM AUTH)
router.put('/:id', authenticate, async (req, res) => {
  try {
    console.log(`üì§ PUT /api/room-types/${req.params.id}`);
    console.log('üì¶ Dados para atualizar:', req.body);
    
    const { nome, precosPorPeriodo, amenidades, descricao, configuracao, disponibilidade } = req.body;

    const roomType = await RoomType.findOne({ id: req.params.id });
    if (!roomType) {
      return res.status(404).json({
        success: false,
        message: 'Tipo de quarto n√£o encontrado'
      });
    }

    // Atualizar campos
    if (nome && nome.trim()) {
      roomType.nome = nome.trim();
    }
    if (precosPorPeriodo) {
      roomType.precosPorPeriodo = { ...roomType.precosPorPeriodo, ...precosPorPeriodo };
    }
    if (amenidades) {
      roomType.amenidades = amenidades;
    }
    if (descricao !== undefined) {
      roomType.descricao = descricao;
    }
    if (configuracao) {
      roomType.configuracao = { ...roomType.configuracao, ...configuracao };
    }
    if (disponibilidade) {
      roomType.disponibilidade = { ...roomType.disponibilidade, ...disponibilidade };
    }
    
    roomType.atualizadoPor = req.user?.id || req.user?._id;

    await roomType.save();

    console.log('‚úÖ Tipo atualizado:', roomType.id);

    res.json({
      success: true,
      data: roomType,
      message: `Tipo "${roomType.nome}" atualizado com sucesso`
    });

  } catch (error) {
    console.error('‚ùå Erro ao atualizar tipo:', error);
    
    if (error.name === 'ValidationError') {
      const errors = Object.values(error.errors).map(err => err.message);
      res.status(400).json({
        success: false,
        message: 'Dados inv√°lidos',
        errors: errors
      });
    } else {
      res.status(500).json({
        success: false,
        message: 'Erro ao atualizar tipo',
        error: error.message
      });
    }
  }
});

// ‚úÖ DELETE /api/room-types/:id - Deletar tipo (COM AUTH)
router.delete('/:id', authenticate, async (req, res) => {
  try {
    console.log(`üóëÔ∏è DELETE /api/room-types/${req.params.id}`);
    
    // Verificar se n√£o √© um tipo padr√£o
    const protectedTypes = ['standard', 'premium', 'luxo', 'suite'];
    if (protectedTypes.includes(req.params.id)) {
      return res.status(400).json({
        success: false,
        message: 'N√£o √© poss√≠vel deletar tipos padr√£o'
      });
    }

    const roomType = await RoomType.findOne({ id: req.params.id });
    if (!roomType) {
      return res.status(404).json({
        success: false,
        message: 'Tipo de quarto n√£o encontrado'
      });
    }

    // Verificar se h√° quartos usando este tipo
    const Room = require('../models/Room');
    const roomsWithType = await Room.countDocuments({ 
      type: req.params.id, 
      isActive: true 
    });
    
    if (roomsWithType > 0) {
      return res.status(400).json({
        success: false,
        message: `N√£o √© poss√≠vel deletar. Existem ${roomsWithType} quartos usando este tipo.`,
        data: { roomsCount: roomsWithType }
      });
    }

    // Soft delete
    roomType.disponibilidade.ativo = false;
    roomType.atualizadoPor = req.user?.id || req.user?._id;
    await roomType.save();

    console.log('‚úÖ Tipo deletado (soft):', roomType.nome);

    res.json({
      success: true,
      message: `Tipo "${roomType.nome}" removido com sucesso`
    });

  } catch (error) {
    console.error('‚ùå Erro ao deletar tipo:', error);
    res.status(500).json({
      success: false,
      message: 'Erro ao deletar tipo',
      error: error.message
    });
  }
});

// ‚úÖ POST /api/room-types/init - Inicializar tipos padr√£o (COM AUTH)
router.post('/init', authenticate, async (req, res) => {
  try {
    console.log('üèóÔ∏è POST /api/room-types/init - Inicializando tipos padr√£o...');
    
    // Verificar se usu√°rio √© admin
    if (req.user?.role !== 'admin') {
      return res.status(403).json({
        success: false,
        message: 'Apenas administradores podem inicializar tipos padr√£o'
      });
    }

    const tiposCriados = await RoomType.criarTiposPadrao();

    res.json({
      success: true,
      data: tiposCriados,
      message: 'Tipos padr√£o inicializados com sucesso'
    });

  } catch (error) {
    console.error('‚ùå Erro ao inicializar tipos:', error);
    res.status(500).json({
      success: false,
      message: 'Erro ao inicializar tipos',
      error: error.message
    });
  }
});

module.exports = router;
