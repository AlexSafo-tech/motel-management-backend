// routes/roomTypes.js - VERS√ÉO SEM AUTH PARA TESTE
const express = require('express');
const router = express.Router();
const RoomType = require('../models/RoomType');
// const { authenticate } = require('../middleware/auth'); // ‚ùå COMENTADO TEMPORARIAMENTE

// ‚úÖ GET /api/room-types - Listar todos os tipos (SEM AUTH)
router.get('/', async (req, res) => {
  try {
    console.log('üì• GET /api/room-types - Listando tipos de quarto...');
    
    const roomTypes = await RoomType.findActive();
    
    console.log(`‚úÖ ${roomTypes.length} tipos encontrados`);
    
    res.json({
      success: true,
      data: roomTypes,
      message: `${roomTypes.length} tipos de quarto encontrados`
    });
  } catch (error) {
    console.error('‚ùå Erro ao buscar tipos de quarto:', error);
    res.status(500).json({
      success: false,
      message: 'Erro interno do servidor',
      error: error.message
    });
  }
});

// ‚úÖ GET /api/room-types/:id - Buscar tipo espec√≠fico (SEM AUTH)
router.get('/:id', async (req, res) => {
  try {
    console.log(`üì• GET /api/room-types/${req.params.id}`);
    
    const roomType = await RoomType.findOne({ 
      id: req.params.id, 
      active: true 
    });
    
    if (!roomType) {
      return res.status(404).json({
        success: false,
        message: 'Tipo de quarto n√£o encontrado'
      });
    }
    
    res.json({
      success: true,
      data: roomType,
      message: 'Tipo encontrado'
    });
  } catch (error) {
    console.error('‚ùå Erro ao buscar tipo:', error);
    res.status(500).json({
      success: false,
      message: 'Erro interno do servidor',
      error: error.message
    });
  }
});

// ‚úÖ POST /api/room-types - Criar novo tipo (SEM AUTH)
router.post('/', async (req, res) => {
  try {
    console.log('üì§ POST /api/room-types - Criando novo tipo...');
    console.log('üì¶ Dados recebidos:', req.body);
    
    const { nome, periodosConfig, precosBase, amenidadesPadrao, descricao } = req.body;

    if (!nome || !nome.trim()) {
      return res.status(400).json({
        success: false,
        message: 'Nome do tipo √© obrigat√≥rio'
      });
    }

    const id = nome.toLowerCase().replace(/\s+/g, '_').replace(/[^a-z0-9_]/g, '');

    // Verificar se j√° existe
    const existingType = await RoomType.findOne({ id });
    if (existingType) {
      return res.status(400).json({
        success: false,
        message: 'Tipo de quarto j√° existe'
      });
    }

    // Buscar o maior order atual
    const lastType = await RoomType.findOne().sort({ order: -1 });
    const newOrder = lastType ? lastType.order + 1 : 1;

    // Preparar dados do tipo
    const roomTypeData = {
      id,
      nome: nome.trim(),
      periodosConfig: periodosConfig || new Map(),
      precosBase: precosBase || {
        '4h': 50.00,
        '6h': 70.00,
        '12h': 100.00,
        'daily': 150.00
      },
      amenidadesPadrao: amenidadesPadrao || ['wifi', 'ar_condicionado', 'tv'],
      descricao: descricao || `Quarto tipo ${nome}`,
      order: newOrder
      // createdBy: req.user?.id // ‚ùå COMENTADO (sem user)
    };

    const roomType = new RoomType(roomTypeData);
    await roomType.save();

    console.log('‚úÖ Tipo criado com sucesso:', roomType.id);

    res.status(201).json({
      success: true,
      data: roomType,
      message: `Tipo "${nome}" criado com sucesso`
    });

  } catch (error) {
    console.error('‚ùå Erro ao criar tipo:', error);
    
    if (error.code === 11000) {
      res.status(400).json({
        success: false,
        message: 'Tipo com este ID j√° existe'
      });
    } else if (error.name === 'ValidationError') {
      const errors = Object.values(error.errors).map(err => err.message);
      res.status(400).json({
        success: false,
        message: 'Dados inv√°lidos',
        errors: errors
      });
    } else {
      res.status(500).json({
        success: false,
        message: 'Erro ao criar tipo',
        error: error.message
      });
    }
  }
});

// ‚úÖ POST /api/room-types/init - Inicializar tipos padr√£o (SEM AUTH)
router.post('/init', async (req, res) => {
  try {
    console.log('üèóÔ∏è POST /api/room-types/init - Inicializando tipos padr√£o...');
    
    await RoomType.criarTiposPadrao();

    const tipos = await RoomType.findActive();

    res.json({
      success: true,
      data: tipos,
      message: 'Tipos padr√£o inicializados com sucesso'
    });

  } catch (error) {
    console.error('‚ùå Erro ao inicializar tipos:', error);
    res.status(500).json({
      success: false,
      message: 'Erro ao inicializar tipos',
      error: error.message
    });
  }
});

module.exports = router;
